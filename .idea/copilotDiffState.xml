<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/naming_code.ipynb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/naming_code.ipynb" />
              <option name="originalContent" value="#%%&#10;import pandas as pd&#10;import numpy as np&#10;&#10;#%%&#10;file = &quot;T2T_SNP_B_MAF_0.05_RMP_Microhap.csv&quot;&#10;#%% md&#10;### Naming Scheme MH1,MH2, for all SNPs&#10;#%%&#10;df = pd.read_csv(file)&#10;df.head(3)&#10;#%%&#10;MAX_DISTANCE = 200&#10;SNP_NUM = 3&#10;snp_cluster_list = []&#10;snp_pos_list = df['POS'].tolist()&#10;temp_cluster_list = [snp_pos_list[0]]&#10;temp_group_id_list = []&#10;group_id = 1&#10;&#10;for i in range(1, len(snp_pos_list[0:50])):&#10;    if (snp_pos_list[i] - snp_pos_list[i-1]) &lt;= MAX_DISTANCE:&#10;        temp_cluster_list.append(snp_pos_list[i])&#10;    else:&#10;        if len(temp_cluster_list) &gt;= SNP_NUM:&#10;            snp_cluster_list.extend(temp_cluster_list)&#10;            # adding naming scheme according to the temp_group_id_list&#10;            for n in range(len(temp_cluster_list)):&#10;                temp_group_id_list.append(f&quot;MH{group_id}&quot;)&#10;            group_id += 1&#10;            # update the temp_cluster_list with the recent element&#10;            temp_cluster_list = [snp_pos_list[i]]&#10;&#10;# If at the end of the loop the size of temp_cluster_list is more than 3&#10;if len(temp_cluster_list) &gt;= SNP_NUM:&#10;    snp_cluster_list.extend(temp_cluster_list)&#10;    for n in range(len(temp_cluster_list)):&#10;        temp_group_id_list.append(f&quot;MH{group_id}&quot;)&#10;    group_id += 1&#10;&#10;print(f&quot;snp_pos_list length: {len(snp_pos_list[0:50])}&quot;)&#10;print(f&quot;temp_group_id_list length: {len(temp_group_id_list)}&quot;)&#10;print(f&quot;snp_cluster_list: {snp_cluster_list}&quot;)&#10;print(f&quot;temp_group_id_list: {temp_group_id_list}&quot;)" />
              <option name="updatedContent" value="#%%&#10;import pandas as pd&#10;import numpy as np&#10;&#10;#%%&#10;file = &quot;T2T_SNP_B_MAF_0.05_RMP_Microhap.csv&quot;&#10;#%% md&#10;### Naming Scheme MH1,MH2, for all SNPs&#10;#%%&#10;df = pd.read_csv(file)&#10;df.head(3)&#10;#%%&#10;MAX_DISTANCE = 200&#10;SNP_NUM = 3&#10;snp_cluster_list = []&#10;snp_pos_list = df['POS'].tolist()&#10;temp_cluster_list = [snp_pos_list[0]]&#10;temp_group_id_list = []&#10;group_id = 1&#10;&#10;# Assign group IDs for all SNPs, default to 'UNGROUPED'&#10;group_ids = ['UNGROUPED'] * len(snp_pos_list[0:50])&#10;&#10;for i in range(1, len(snp_pos_list[0:50])):&#10;    if (snp_pos_list[i] - snp_pos_list[i-1]) &lt;= MAX_DISTANCE:&#10;        temp_cluster_list.append(snp_pos_list[i])&#10;    else:&#10;        if len(temp_cluster_list) &gt;= SNP_NUM:&#10;            snp_cluster_list.extend(temp_cluster_list)&#10;            for idx in range(i - len(temp_cluster_list), i):&#10;                group_ids[idx] = f&quot;MH{group_id}&quot;&#10;            group_id += 1&#10;        temp_cluster_list = [snp_pos_list[i]]&#10;&#10;# If at the end of the loop the size of temp_cluster_list is more than 3&#10;if len(temp_cluster_list) &gt;= SNP_NUM:&#10;    snp_cluster_list.extend(temp_cluster_list)&#10;    for idx in range(len(snp_pos_list[0:50]) - len(temp_cluster_list), len(snp_pos_list[0:50])):&#10;        group_ids[idx] = f&quot;MH{group_id}&quot;&#10;    group_id += 1&#10;&#10;print(f&quot;snp_pos_list length: {len(snp_pos_list[0:50])}&quot;)&#10;print(f&quot;group_ids length: {len(group_ids)}&quot;)&#10;print(f&quot;snp_pos_list: {snp_pos_list[0:50]}&quot;)&#10;print(f&quot;group_ids: {group_ids}&quot;)&#10;# Now you can combine as DataFrame:&#10;df_out = pd.DataFrame({'POS': snp_pos_list[0:50], 'GroupID': group_ids})&#10;df_out.head()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>